<style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1, h2 {
            color: #2c3e50;
        }
        .order-info {
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .order-status {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 15px;
            font-weight: bold;
        }
        .status-processing { background-color: #f39c12; color: #fff; }
        .status-shipped { background-color: #3498db; color: #fff; }
        .status-delivered { background-color: #2ecc71; color: #fff; }
        .status-cancelled { background-color: #e74c3c; color: #fff; }
        .tracking {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        .tracking-step {
            text-align: center;
            position: relative;
            flex: 1;
        }
        .tracking-step::before {
            content: '';
            position: absolute;
            top: 15px;
            left: -50%;
            right: 50%;
            height: 2px;
            background-color: #3498db;
            z-index: 1;
        }
        .tracking-step:first-child::before {
            display: none;
        }
        .tracking-icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #3498db;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 5px;
            position: relative;
            z-index: 2;
        }
        .tracking-icon.inactive {
            background-color: #bdc3c7;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #2c3e50;
            color: #fff;
        }
        .total-section {
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
        }
        .total-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        .grand-total {
            font-weight: bold;
            font-size: 1.2em;
            color: #2c3e50;
        }
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #e74c3c;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            text-align: center;
        }
        .btn:hover {
            background-color: #c0392b;
        }
        @media (max-width: 600px) {
            .tracking {
                flex-direction: column;
            }
            .tracking-step {
                margin-bottom: 20px;
            }
            .tracking-step::before {
                display: none;
            }
            table, tr, td {
                display: block;
            }
            th {
                display: none;
            }
            tr {
                margin-bottom: 15px;
            }
            td {
                text-align: right;
                padding-left: 50%;
                position: relative;
            }
            td::before {
                content: attr(data-label);
                position: absolute;
                left: 6px;
                width: 45%;
                padding-right: 10px;
                white-space: nowrap;
                font-weight: bold;
                text-align: left;
            }
        }
    </style>



<div class="container">
    <h1>Order Details</h1>
    <div class="order-info">
        <p><strong>Order ID:</strong> <%= order._id %></p>
        <p class="order-date">Placed on: <%= new Date(order.createdOn).toLocaleDateString() %></p>
        <p><strong>Status:</strong>
            <span class="order-status status-<%= order.status.toLowerCase() %>">
                <%= order.status %>
            </span>
        </p>
    </div>

    <h2>Order Tracking</h2>
    <div class="tracking">
        <% const trackingSteps = ['Processing', 'Shipped', 'Out for Delivery', 'Delivered']; %>
        <% const currentStepIndex = trackingSteps.indexOf(order.status); %>
        <% trackingSteps.forEach((step, index) => { %>
            <div class="tracking-step">
                <div class="tracking-icon <%= index > currentStepIndex ? 'inactive' : '' %>">
                    <%= index + 1 %>
                </div>
                <div><%= step %></div>
            </div>
        <% }); %>
    </div>

    <h2>Items Ordered</h2>
    <table>
        <thead>
            <tr>
                <th>Product</th>
                <th>Image</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
            </tr>
        </thead>
        <tbody>
            <% order.orderedItems.forEach(item => { %>
                <tr>
                    <td data-label="Product"><%= item.product.productName %></td>
                    <td>
                        <img src="/uploads/<%= item.product.productImage[0] %>" 
                             alt="<%= item.product.productName %>"
                             class="img-fluid rounded-circle"
                             style="width: 40px; height: 40px;">
                    </td>
                    <td data-label="Quantity"><%= item.quantity %></td>
                    <td data-label="Price">₹<%= item.price.toFixed(2) %></td>
                    <td data-label="Total">₹<%= (item.quantity * item.price).toFixed(2) %></td>
                </tr>
            <% }); %>
        </tbody>
    </table>

    <div class="total-section">
        <div class="total-row">
            <span>Subtotal:</span>
            <span>₹<%= order.orderedItems.reduce((sum, item) => sum + item.quantity * item.price, 0).toFixed(2) %></span>
        </div>
        <div class="total-row grand-total">
            <span>Total:</span>
            <span>₹<%= order.finalAmount.toFixed(2) %></span>
        </div>
    </div>

    <h2>Shipping Address</h2>
    <p>
        <strong>Name:</strong> <%= order.address.name %><br>
        <strong>Street:</strong> <%= order.address.street %><br>
        <strong>City:</strong> <%= order.address.city %><br>
        <strong>State & Pin:</strong> <%= order.address.state %> - <%= order.address.zipCode %><br>
        <strong>Phone:</strong> <%= order.address.phone %>
    </p>

   

<div>
    <% if (order.status === 'cancelled') { %>
        <div class="order-cancelled-message">
            <h2>Order Cancelled</h2>
            <p>Your order has been successfully cancelled.</p>
            <a href="/" class="btn">OK</a>
        </div>
    <% } else if (order.status !== 'Delivered') { %>
        <button class="btn cancel-btn" data-order-id="<%= order._id %>">Cancel Order</button>
    <% } %>
</div>
</div>

<script>
    document.querySelectorAll('.cancel-btn').forEach(button => {
        button.addEventListener('click', async function () {
            const orderId = this.getAttribute('data-order-id');
            
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: 'You are about to cancel this order.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/cancel-order/${orderId}`, { method: 'POST' });
                    const data = await response.json();

                    if (data.success) {
                        Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success')
                            .then(() => window.location.reload());
                    } else {
                        Swal.fire('Error!', data.error || 'Failed to cancel the order.', 'error');
                    }
                } catch (error) {
                    Swal.fire('Error!', 'An unexpected error occurred.', 'error');
                }
            }
        });
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

