<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .address-card {
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

        .address-card:hover {
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }

        .selected-address {
            border-color: #28a745;
        }

        .address-card .card-body {
            padding: 1.25rem;
        }

        .address-card h6 {
            margin-bottom: 0.5rem;
            color: #333;
        }

        .address-card p {
            color: #666;
            font-size: 0.9rem;
        }
        .address-card {
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

    .address-card:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .selected-address {
        border-color: #0d6efd;
        background-color: rgba(13, 110, 253, 0.05);
    }

    .card-header {
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    @media (max-width: 991.98px) {
        .sticky-top {
            position: relative !important;
            top: 0 !important;
        }
    }
    </style>
</head>
<body>
    <%- include("../../view/partials/user/header") %>

    <div class="container my-5">
        <!-- Progress Bar -->
        <div class="progress mb-4" style="height: 25px;">
            <div class="progress-bar" role="progressbar" style="width: 50%;" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">Checkout Progress</div>
        </div>
    
        <div class="row g-4">
            <!-- Left Column - Address, Payment, and Coupon -->
            <div class="col-lg-8">
                <!-- Address Section -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center bg-light">
                        <h5 class="mb-0">Shipping Address</h5>
                        <a href="/addAddress?redirectTo=checkout" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-plus"></i> Add New Address
                        </a>
                    </div>
                    
                    <div class="card-body">
                        <div class="row g-3">
                            <% if (addresses && addresses.length > 0) { %>
                                <% addresses.forEach((address, index) => { %>
                                    <div class="col-md-6">
                                        <div class="card address-card h-100" data-address-index="<%= index %>">
                                            <div class="card-body">
                                                <div class="form-check">
                                                    <input class="form-check-input" 
                                                           type="radio" 
                                                           name="selectedAddress" 
                                                           id="address<%= index %>" 
                                                           value="<%= index %>"
                                                           onchange="handleAddressSelection(this.value)">
                                                    <label class="form-check-label w-100" for="address<%= index %>">
                                                        <h6 class="mb-2"><%= address.addressType %></h6>
                                                        <p class="mb-1"><%= address.name %></p>
                                                        <p class="mb-1"><%= address.landMark %></p>
                                                        <p class="mb-1"><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                                                        <p class="mb-1">Phone: <%= address.phone %></p>
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="card-footer bg-transparent d-flex justify-content-between border-top">
                                                <a href="/editAddress?id=<%= address._id %>" class="btn btn-sm btn-outline-secondary">Edit</a>
                                                <a href="/deleteAddress?id=<%= address._id %>" 
                                                   class="btn btn-sm btn-outline-danger"
                                                   onclick="return confirm('Are you sure you want to delete this address?')">Delete</a>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="col-12">
                                    <div class="alert alert-info">
                                        No saved addresses found. Please add a new address.
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                    <input type="hidden" id="selectedAddressIndex" value="" />
                </div>
    
                <!-- Payment Section -->
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Payment Method</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-check mb-3">
                            <input class="form-check-input" 
                                   type="radio" 
                                   name="paymentMethod" 
                                   id="cod" 
                                   value="COD">
                            <label class="form-check-label" for="cod">
                                Cash on Delivery (COD)
                            </label>
                        </div>
                        <div class="form-check mb-3">
                            <input class="form-check-input"
                                   type="radio"
                                   name="paymentMethod"
                                   id="wallet"
                                   value="Wallet">
                            <label class="form-check-label" for="wallet">
                                Wallet Balance (â‚¹<span id="walletBalance">Loading...</span>)
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" 
                                   type="radio" 
                                   name="paymentMethod" 
                                   id="onlinePayment" 
                                   value="Online">
                            <label class="form-check-label" for="onlinePayment">
                                Online Payment
                            </label>
                        </div>
                    </div>
                </div>
    
                <!-- Coupon Section -->
                <div class="card">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Apply Coupon</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="input-group">
                                <input type="text" 
                                       id="couponCode" 
                                       class="form-control" 
                                       placeholder="Enter coupon code">
                                <button class="btn btn-primary" 
                                        type="button" 
                                        id="applyCouponBtn">
                                    Apply
                                </button>
                            </div>
                            <div id="couponError" class="text-danger mt-2" style="display: none;"></div>
                            <div id="couponSuccess" class="text-success mt-2" style="display: none;"></div>
                        </div>
                        <div id="availableCoupons">
                            <h6 class="mb-2">Available Coupons</h6>
                            <div id="couponsList" class="small">
                                <!-- Coupons will be populated here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    
            <!-- Right Column - Cart Items and Order Summary -->
            <div class="col-lg-4">
                <!-- Cart Items -->
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Cart Items</h5>
                    </div>
                    <div class="card-body">
                        <% if (cart && cart.items && cart.items.length > 0) { %>
                            <% cart.items.forEach(item => { %>
                                <div class="d-flex mb-3 align-items-center">
                                    <img src="/uploads/<%= item.productId.productImage[0] %>" 
                                         alt="<%= item.productId.productName %>" 
                                         class="rounded me-3"
                                         style="width: 60px; height: 60px; object-fit: cover;">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1"><%= item.productId.productName %></h6>
                                        <small class="text-muted d-block mb-1">
                                            Size: <%= item.size %> | Qty: <%= item.quantity %>
                                        </small>
                                        <div class="text-primary fw-semibold">
                                            $<%= item.price.toFixed(2) %>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } %>
                    </div>
                </div>
    
                <!-- Order Summary -->
                <div class="card sticky-top" style="top: 20px;">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal</span>
                            <span data-subtotal>â‚¹<%= totals.subtotal %></span>
                        </div>
                        <div id="discountRow" class="d-flex justify-content-between mb-2" style="display: none;">
                            <span>Discount</span>
                            <span data-discount>â‚¹0.00</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping</span>
                            <span data-shipping>
                                <% if (totals.shipping === 0) { %>
                                    <span class="text-success">Free</span>
                                <% } else { %>
                                    â‚¹<%= totals.shipping %>
                                <% } %>
                            </span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tax (10%)</span>
                            <span data-tax>â‚¹<%= totals.tax %></span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <strong>Total</strong>
                            <strong data-total>â‚¹<%= totals.totalPrice %></strong>
                        </div>
                        <button id="placeOrderBtn" 
                                class="btn btn-primary w-100" 
                                onclick="placeOrder()"
                                <%= !addresses.length ? 'disabled' : '' %>>
                            Place Order
                        </button>
                        <% if (!addresses.length) { %>
                            <small class="text-danger d-block mt-2 text-center">
                                Please add a delivery address to proceed
                            </small>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>
    

   

                

    
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Address card selection
        document.querySelectorAll('.address-card').forEach(card => {
            card.addEventListener('click', function() {
                document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected-address'));
                this.classList.add('selected-address');
            });
        });

        

        // Payment method toggle
        document.querySelectorAll('input[name="paymentMethod"]').forEach(input => {
            input.addEventListener('change', function() {
                const creditCardForm = document.getElementById('creditCardForm');
                creditCardForm.style.display = this.id === 'creditCard' ? 'block' : 'none';
            });
        });
    


        //latest

function selectAddress(addressId) {
    // Remove selected class from all address cards
    document.querySelectorAll('.address-card').forEach(card => {
        card.classList.remove('selected-address');
    });
    
    // Add selected class to clicked address card
    const selectedCard = document.querySelector(`[data-address-id="${addressId}"]`);
    if (selectedCard) {
        selectedCard.classList.add('selected-address');
    }
    
    // Store selected address ID (you can use this when placing the order)
    document.getElementById('selectedAddressId').value = addressId;
}

function editAddress(addressId) {
    // Redirect to address edit page or show edit modal
    window.location.href = `/address/edit/${addressId}`;
}

function deleteAddress(addressId) {
    if (confirm('Are you sure you want to delete this address?')) {
        fetch(`/address/delete/${addressId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Remove the address card from DOM
                const addressCard = document.querySelector(`[data-address-id="${addressId}"]`).parentNode;
                addressCard.remove();
                
                // Show success message
                alert('Address deleted successfully');
            } else {
                alert('Failed to delete address');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while deleting the address');
        });
    }
}

function showAddAddressForm() {
    // Implement your logic to show address form modal or redirect to add address page
    window.location.href = '/address/add';
}



///////////////////////


// display prices
function handleAddressSelection(index) {
    // Store the selected address index
    document.getElementById('selectedAddressIndex').value = index;
    
    // Update visual selection
    document.querySelectorAll('.address-card').forEach(card => {
        if (card.dataset.addressIndex === index) {
            card.classList.add('selected');
        } else {
            card.classList.remove('selected');
        }
    });
    
    const selectedCard = document.querySelector(`[data-address-index="${index}"]`);
    if (selectedCard) {
        selectedCard.classList.add('selected-address');
    }
}


async function placeOrder() {
    const selectedAddressIndex = document.getElementById('selectedAddressIndex').value;
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;

    if (!selectedAddressIndex && selectedAddressIndex !== '0') {
        alert('Please select a delivery address');
        return;
    }

    if (!selectedPaymentMethod) {
        alert('Please select a payment method');
        return;
    }

    const cartTotal = parseFloat(<%= totals.totalPrice %>);
    
    // Validate COD limit
    if (selectedPaymentMethod === 'COD' && cartTotal > 1000) {
        Swal.fire({
            title: 'Payment Method Not Available',
            text: 'Cash on Delivery is not available for orders above â‚¹1,000. Please choose online payment.',
            icon: 'warning',
            confirmButtonText: 'OK'
        });
        return;
    }

    try {
        const response = await fetch('/place-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                addressIndex: parseInt(selectedAddressIndex),
                paymentMethod: selectedPaymentMethod
            })
        });

        const data = await response.json();
        console.log('API Response:', data);

        if (data.success) {
            if (selectedPaymentMethod === "Online") {
                const options = {
                    key: data.key,
                    amount: data.amount * 100,
                    currency: data.currency,
                    name: "DERBY",
                    description: "Purchase Order",
                    order_id: data.orderId,
                    handler: async function (response) {
                        const verifyRes = await fetch('/verify-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature
                            })
                        });

                        const verifyData = await verifyRes.json();
                        if (verifyData.success) {
                            Swal.fire({
        title: "Payment Successful!",
        text: "Your order has been placed successfully.",
        icon: "success",
        showCancelButton: true,
        confirmButtonText: "Order Details",
        cancelButtonText: "Go to Home"
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.href = `/order/success/${verifyData.orderId}`;// Redirect to order details
        } else {
            window.location.href = "/"; // Redirect to home page
        }
    });
                             
                            
                        } else {
                            Swal.fire({
                                title: 'Payment Failed!',
                                text: 'There was an issue with your payment. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    },
                    prefill: {
                        name: "Customer Name",
                        email: "customer@example.com",
                        contact: "9999999999"
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };

                const razorpayInstance = new Razorpay(options);
                razorpayInstance.open();
            } else {
                Swal.fire({
        title: "Payment Successful!",
        text: "Your order has been placed successfully.",
        icon: "success",
        showCancelButton: true,
        confirmButtonText: "Order Details",
        cancelButtonText: "Go to Home"
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.href = `/order/success/${data.orderId}`;// Redirect to order details
        } else {
            window.location.href = "/"; // Redirect to home page
        }
    });
            }
        } else {
            Swal.fire({
                title: 'Error!',
                text: data.error || 'Failed to place order.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error('Error placing order:', error);
        Swal.fire({
            title: 'Unexpected Error!',
            text: 'Something went wrong. Please try again later.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
}




let appliedCoupon = null;

// Fetch available coupons
async function fetchAvailableCoupons() {
    try {
        const response = await fetch('/coupons/available', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                cartTotal:  <%= totals.subtotal %>
            })
        });
        
        const data = await response.json();
        if (data.success) {
            displayAvailableCoupons(data.coupons);
        }
    } catch (error) {
        console.error('Error fetching coupons:', error);
    }
}

// Display available coupons
function displayAvailableCoupons(coupons) {
    const couponsList = document.getElementById('couponsList');
    if (coupons.length === 0) {
        couponsList.innerHTML = '<p>No coupons available</p>';
        return;
    }

    const couponHtml = coupons.map(coupon => `
        <div class="border-bottom py-2">
            <strong>${coupon.name}</strong>: 
            ${coupon.amountType === 'percentage' ? coupon.offerPrice + '%' : '$' + coupon.offerPrice} off
            <br>
            <small>Min. purchase: $${coupon.minimumPrice}</small>
            <button class="btn btn-sm btn-link" onclick="applyCoupon('${coupon.name}')">
                Apply
            </button>
        </div>
    `).join('');

    couponsList.innerHTML = couponHtml;
}


async function applyCoupon(code) {
    const couponInput = document.getElementById('couponCode');
    if (code) {
        couponInput.value = code;
    }
    code = couponInput.value.trim();
    
    if (!code) {
        showCouponError('Please enter a coupon code');
        return;
    }

    const subtotal = parseFloat(<%= totals.subtotal %>); // Get the subtotal directly from EJS

    try {
        const response = await fetch('/coupons/validate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                code,
                cartTotal: subtotal
            })
        });

        const data = await response.json();
        
        if (data.success) {
            appliedCoupon = data.coupon;
            updateOrderSummary();
            showCouponSuccess(`Coupon applied successfully! Discount: ${data.coupon.amountType === 'percentage' ? 
                data.coupon.offerPrice + '%' : '$' + data.coupon.discountAmount}`);
        } else {
            // Show specific error message
            const errorMessage = data.message || 'Invalid coupon code';
            showCouponError(errorMessage);
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        showCouponError('Error applying coupon. Please try again.');
    }
}


function showCouponError(message) {
    const errorDiv = document.getElementById('couponError');
    errorDiv.textContent = message;
    errorDiv.style.display = 'block';
    
    // Hide success message if any
    const successDiv = document.getElementById('couponSuccess');
    if (successDiv) {
        successDiv.style.display = 'none';
    }
}

// Show coupon success
function showCouponSuccess(message) {
    const successDiv = document.getElementById('couponSuccess');
    successDiv.innerHTML = `${message} <button class="btn btn-sm btn-link text-danger" onclick="removeCoupon()">Remove</button>`;
    successDiv.style.display = 'block';
    document.getElementById('couponError').style.display = 'none';
}

function updateOrderSummary() {
    const subtotal = parseFloat(<%= totals.subtotal %>);
    let discount = 0;
    
    if (appliedCoupon) {
        if (appliedCoupon.amountType === 'percentage') {
            discount = (subtotal * appliedCoupon.offerPrice) / 100;
        } else {
            discount = appliedCoupon.discountAmount;
        }
    }

    const shipping = parseFloat(<%= totals.shipping %>);
    const subtotalAfterDiscount = subtotal - discount;
    const tax = (subtotalAfterDiscount * 0.1); // 10% tax on amount after discount
    const total = subtotalAfterDiscount + shipping + tax;

    // Update display elements
    const discountRow = document.getElementById('discountRow');
    const discountElement = document.querySelector('[data-discount]');
    const subtotalElement = document.querySelector('[data-subtotal]');
    const taxElement = document.querySelector('[data-tax]');
    const totalElement = document.querySelector('[data-total]');

    if (subtotalElement) subtotalElement.textContent = `$${subtotal.toFixed(2)}`;
    
    if (discount > 0) {
        discountRow.style.display = 'flex';
        if (discountElement) discountElement.textContent = `-$${discount.toFixed(2)}`;
    } else {
        discountRow.style.display = 'none';
    }
    
    if (taxElement) taxElement.textContent = `$${tax.toFixed(2)}`;
    if (totalElement) totalElement.textContent = `$${total.toFixed(2)}`;
}


// Initialize
document.addEventListener('DOMContentLoaded', () => {
    fetchAvailableCoupons();
    document.getElementById('applyCouponBtn').addEventListener('click', () => applyCoupon());
});


function removeCoupon() {
    appliedCoupon = null; // Reset the applied coupon

    // Hide the success message
    const successDiv = document.getElementById('couponSuccess');
    if (successDiv) {
        successDiv.style.display = 'none';
    }

    // Update the order summary without the coupon discount
    updateOrderSummary();

    // Optionally reset the coupon input field
    const couponInput = document.getElementById('couponCode');
    if (couponInput) {
        couponInput.value = '';
    }

    // Re-fetch available coupons (optional)
    fetchAvailableCoupons();
}
function updateOrderSummaryAfterRemoval() {
    const subtotal = parseFloat(document.querySelector('[data-subtotal]').textContent.replace('$', ''));
    const shipping = parseFloat(document.querySelector('[data-shipping]').textContent.includes('Free') ? 0 : 
        document.querySelector('[data-shipping]').textContent.replace('$', ''));
    
    // Calculate tax on full subtotal (10%)
    const tax = subtotal * 0.1;
    const total = subtotal + shipping + tax;

    // Hide discount row
    const discountRow = document.getElementById('discountRow');
    discountRow.style.display = 'none';
    
    // Reset discount amount
    const discountElement = document.querySelector('[data-discount]');
    if (discountElement) {
        discountElement.textContent = '$0.00';
    }

    // Update tax and total
    const taxElement = document.querySelector('[data-tax]');
    const totalElement = document.querySelector('[data-total]');
    
    if (taxElement) {
        taxElement.textContent = `$${tax.toFixed(2)}`;
    }
    
    if (totalElement) {
        totalElement.textContent = `$${total.toFixed(2)}`;
    }
}

// Update the original updateOrderSummary function to handle both application and removal
function updateOrderSummary() {
    const subtotal = parseFloat(document.querySelector('[data-subtotal]').textContent.replace('$', ''));
    let discount = 0;
    
    if (appliedCoupon) {
        if (appliedCoupon.amountType === 'percentage') {
            discount = (subtotal * appliedCoupon.offerPrice) / 100;
        } else {
            discount = appliedCoupon.discountAmount;
        }
    }

    const shipping = parseFloat(document.querySelector('[data-shipping]').textContent.includes('Free') ? 0 : 
        document.querySelector('[data-shipping]').textContent.replace('$', ''));
    const subtotalAfterDiscount = subtotal - discount;
    const tax = subtotalAfterDiscount * 0.1; // 10% tax on amount after discount
    const total = subtotalAfterDiscount + shipping + tax;

    // Update display elements
    const discountRow = document.getElementById('discountRow');
    const discountElement = document.querySelector('[data-discount]');
    const taxElement = document.querySelector('[data-tax]');
    const totalElement = document.querySelector('[data-total]');

    if (discount > 0) {
        discountRow.style.display = 'flex';
        if (discountElement) {
            discountElement.textContent = `-$${discount.toFixed(2)}`;
        }
    } else {
        discountRow.style.display = 'none';
        if (discountElement) {
            discountElement.textContent = '$0.00';
        }
    }
    
    if (taxElement) {
        taxElement.textContent = `$${tax.toFixed(2)}`;
    }
    
    if (totalElement) {
        totalElement.textContent = `$${total.toFixed(2)}`;
    }
}


document.addEventListener('DOMContentLoaded', async function() {
    // Fetch wallet balance when page loads
    try {
        const response = await fetch('/balance');
        const data = await response.json();
        
        if (data.success) {
            // Update the wallet balance display
            const walletBalanceElement = document.getElementById('walletBalance');
            walletBalanceElement.textContent = parseInt(data.balance.toFixed(2));
            
            // Enable/disable wallet payment option based on balance
            const walletRadio = document.getElementById('wallet');
            if (data.balance <= 0) {
                walletRadio.disabled = true;
                walletRadio.closest('.form-check').title = 'Insufficient balance';
            }
        }
    } catch (error) {
        console.error('Error fetching wallet balance:', error);
    }
});

//  when balance is insufficient
document.getElementById('wallet').addEventListener('change', function() {
    const walletBalance = parseInt(document.getElementById('walletBalance').textContent);
    // You can add your total order amount comparison here if needed
    if (walletBalance <= 0) {
        this.checked = false;
        alert('Insufficient wallet balance');
    }
});

</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<%-include("../../view/partials/user/footer")%>
