<%- include("../../view/partials/user/header") %>
<div class="container mt-4">
   <h3 class="mt-3" style="color: #046963; margin-bottom:70px">Edit User Address</h3>
   <form id="addressForm" method="POST" action="/editAddress?id=<%= address._id.toLocaleString() %>" class="border-0 p-3">
       <div class="row mb-50">
           <div class="form-group col-md-4">
               <label for="addressType">Address Type:</label>
               <!-- <input type="text" class="form-control border-3" value="<%= address.addressType %>" id="addressType" name="addressType" required> -->
               <select class="form-control border-3" id="addressType" name="addressType" required>
                <option value="Home" <%= address.addressType === 'Home' ? 'selected' : '' %>>Home</option>
                <option value="Office" <%= address.addressType === 'Office' ? 'selected' : '' %>>Office</option>
                <option value="Work" <%= address.addressType === 'Work' ? 'selected' : '' %>>Work</option>
                <option value="Other" <%= address.addressType === 'Other' ? 'selected' : '' %>>Other</option>
            </select>
           </div>
           <div class="form-group col-md-4">
               <label for="name">Name:</label>
               <input type="text" class="form-control border-3" value="<%= address.name %>" id="name" name="name" required>
           </div>
           <div class="form-group col-md-4">
               <label for="city">City:</label>
               <input type="text" class="form-control border-3" id="city" value="<%= address.city %>" name="city" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="landMark">Landmark:</label>
               <input type="text" class="form-control border-3" value="<%= address.landMark%>" id="landMark" name="landMark" required>
           </div>
           <div class="form-group col-md-4">
               <label for="state">State:</label>
               <input type="text" class="form-control border-3" value="<%= address.state %>" id="state" name="state" required>
           </div>
           <div class="form-group col-md-4">
               <label for="pincode">Pincode:</label>
               <input type="number" class="form-control border-3" value="<%= address.pincode %>" id="pincode" name="pincode" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="phone">Phone:</label>
               <input type="number" class="form-control border-3" id="phone" value="<%= address.phone %>" name="phone" required>
           </div>
           <div class="form-group col-md-4">
               <label for="altPhone">Alternate Phone:</label>
               <input type="number" class="form-control border-3" id="altPhone" value="<%= address.altPhone %>" name="altPhone" required>
           </div>
       </div>
       <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
   </form>
</div>


<script>
    document.getElementById('submitButton').addEventListener('click', function (event) {
        if (!validateForm()) {
            event.preventDefault();
        }
    });

    function validateForm() {
        let isValid = true;



        const validAddressTypes = ['Home', 'Office', 'Work', 'Other'];
    
    // Address Type validation
    const addressType = document.getElementById('addressType').value;
    if (!addressType) {
        showError("Please select an address type.");
        isValid = false;
    } else if (!validAddressTypes.includes(addressType)) {
        showError("Invalid address type selected.");
        isValid = false;
    }
        
        // Validation patterns
        const namePattern = /^[A-Za-z\s]+$/;
        const pincodePattern = /^[0-9]{6}$/;
        const phonePattern = /^[0-9]{10}$/;
        const specialCharPattern = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/;
        
        // Text-only fields (letters and spaces only)
        const textOnlyFields = [ "name", "city", "state"];
        textOnlyFields.forEach(function(field) {
            const input = document.getElementById(field);
            const value = input.value.trim();
            
            if (value === "") {
                showError(`Please fill in the ${field} field.`);
                isValid = false;
            } else if (specialCharPattern.test(value)) {
                showError(`Special characters are not allowed in ${field}.`);
                isValid = false;
            } else if (!namePattern.test(value)) {
                showError(`${field} should contain only letters and spaces.`);
                isValid = false;
            }
        });

        // Landmark validation (allow letters, numbers, spaces, but no special chars)
        const landmark = document.getElementById('landMark').value.trim();
        if (landmark === "") {
            showError("Please fill in the landmark field.");
            isValid = false;
        } else if (specialCharPattern.test(landmark)) {
            showError("Special characters are not allowed in landmark.");
            isValid = false;
        }



        // Pincode validation
        const pincode = document.getElementById('pincode').value.trim();
        if (pincode === "") {
            showError("Please fill in the pincode field.");
            isValid = false;
        } else if (!pincodePattern.test(pincode)) {
            showError("Pincode must be exactly 6 digits.");
            isValid = false;
        } else if (/^0{6}$/.test(pincode)) {
          Swal.fire("Error", "Pincode cannot be all zeros.", "error");
          isValid = false;
        }



        // Phone number validation (both primary and alternate)
        const phoneFields = ["phone", "altPhone"];
        phoneFields.forEach(function(field) {
            const phone = document.getElementById(field).value.trim();
            if (phone === "") {
                showError(`Please fill in the ${field} field.`);
                isValid = false;
            } else if (!phonePattern.test(phone)) {
                showError(`${field === 'phone' ? 'Phone' : 'Alternate phone'} number must be exactly 10 digits.`);
                isValid = false;
            }else if (/^0{10}$/.test(phone)) {
              Swal.fire("Error", "Phone number cannot be all zeros.", "error");
              isValid = false;
            }
        });

        return isValid;
    }

    function showError(message) {
        Swal.fire({
            title: 'Error',
            text: message,
            icon: 'error'
        });
    }
</script>
<%- include("../../view/partials/user/footer") %>



