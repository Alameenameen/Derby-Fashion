<%- include("../../view/partials/user/header") %>
<div class="container mt-4">
   <h3 class="mt-3" style="color: #046963; margin-bottom:70px">Edit User Address</h3>
   <form id="addressForm" method="POST" action="/editAddress?id=<%= address._id.toLocaleString() %>" class="border-0 p-3">
       <div class="row mb-50">
           <div class="form-group col-md-4">
               <label for="addressType">Address Type:</label>
               <!-- <input type="text" class="form-control border-3" value="<%= address.addressType %>" id="addressType" name="addressType" required> -->
               <select class="form-control border-3" id="addressType" name="addressType" required>
                <option value="Home" <%= address.addressType === 'Home' ? 'selected' : '' %>>Home</option>
                <option value="Office" <%= address.addressType === 'Office' ? 'selected' : '' %>>Office</option>
                <option value="Work" <%= address.addressType === 'Work' ? 'selected' : '' %>>Work</option>
                <option value="Other" <%= address.addressType === 'Other' ? 'selected' : '' %>>Other</option>
            </select>
           </div>
           <div class="form-group col-md-4">
               <label for="name">Name:</label>
               <input type="text" class="form-control border-3" value="<%= address.name %>" id="name" name="name" required>
           </div>
           <div class="form-group col-md-4">
               <label for="city">City:</label>
               <input type="text" class="form-control border-3" id="city" value="<%= address.city %>" name="city" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="landMark">Landmark:</label>
               <input type="text" class="form-control border-3" value="<%= address.landMark%>" id="landMark" name="landMark" required>
           </div>
           <div class="form-group col-md-4">
               <label for="state">State:</label>
               <input type="text" class="form-control border-3" value="<%= address.state %>" id="state" name="state" required>
           </div>
           <div class="form-group col-md-4">
               <label for="pincode">Pincode:</label>
               <input type="number" class="form-control border-3" value="<%= address.pincode %>" id="pincode" name="pincode" required>
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="phone">Phone:</label>
               <input type="number" class="form-control border-3" id="phone" value="<%= address.phone %>" name="phone" required>
           </div>
           <div class="form-group col-md-4">
               <label for="altPhone">Alternate Phone:</label>
               <input type="number" class="form-control border-3" id="altPhone" value="<%= address.altPhone %>" name="altPhone" required>
           </div>
       </div>
       <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
   </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- <script>
    document.getElementById('submitButton').addEventListener('click', function (event) {
        if (!validateForm()) {
            event.preventDefault();
        }
    });

    function validateForm() {
        let isValid = true;



        const validAddressTypes = ['Home', 'Office', 'Work', 'Other'];
    
    // Address Type validation
    const addressType = document.getElementById('addressType').value;
    if (!addressType) {
        showError("Please select an address type.");
        isValid = false;
    } else if (!validAddressTypes.includes(addressType)) {
        showError("Invalid address type selected.");
        isValid = false;
    }
        
        // Validation patterns
        const namePattern = /^[A-Za-z\s]+$/;
        const pincodePattern = /^\d{6}$/;
        const phonePattern = /^[0-9]{10}$/;
        const specialCharPattern = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/;
        
        // Text-only fields (letters and spaces only)
        const textOnlyFields = [ "name", "city", "state"];
        textOnlyFields.forEach(function(field) {
            const input = document.getElementById(field);
            const value = input.value.trim();
            
            if (value === "") {
                showError(`Please fill in the ${field} field.`);
                isValid = false;
            } else if (specialCharPattern.test(value)) {
                showError(`Special characters are not allowed in ${field}.`);
                isValid = false;
            } else if (!namePattern.test(value)) {
                showError(`${field} should contain only letters and spaces.`);
                isValid = false;
            }
        });

        // Landmark validation (allow letters, numbers, spaces, but no special chars)
        const landmark = document.getElementById('landMark').value.trim();
        if (landmark === "") {
            showError("Please fill in the landmark field.");
            isValid = false;
        } else if (specialCharPattern.test(landmark)) {
            showError("Special characters are not allowed in landmark.");
            isValid = false;
        }



        // Pincode validation
        const pincode = document.getElementById('pincode').value.trim();
        if (!pincodePattern.test(pincode)) {
        Swal.fire("Error", "Pincode must be exactly 6 digits.", "error");
        isValid = false;
    }

    // Check for repeated digits
    if (/^(\d)\1{5}$/.test(pincode)) {
        isValid = false;
    }

    // List of invalid starting digits
    const invalidStartDigits = ['00', '0 '];
    if (invalidStartDigits.includes(pincode.substring(0, 2))) {
        Swal.fire("Error", "Invalid pincode format.", "error");
        isValid = false;
    }




        // Phone number validation (both primary and alternate)
        const phoneFields = ["phone", "altPhone"];
        phoneFields.forEach(function(field) {
            const phone = document.getElementById(field).value.trim();
            if (phone === "") {
                showError(`Please fill in the ${field} field.`);
                isValid = false;
            } else if (!phonePattern.test(phone)) {
                showError(`${field === 'phone' ? 'Phone' : 'Alternate phone'} number must be exactly 10 digits.`);
                isValid = false;
            }else if (/^0{10}$/.test(phone)) {
              Swal.fire("Error", "Phone number cannot be all zeros.", "error");
              isValid = false;
            }
        });

        return isValid;
    }

    function showError(message) {
        Swal.fire({
            title: 'Error',
            text: message,
            icon: 'error'
        });
    }
</script> -->
<script>
document.getElementById('addressForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent form submission first
    if (validateForm()) {
        this.submit(); // Submit only if validation passes
    }
});

function validateForm() {
    let isValid = true;

    // Address Type validation
    const validAddressTypes = ['Home', 'Office', 'Work', 'Other'];
    const addressType = document.getElementById('addressType').value.trim();
    
    if (!addressType) {
        showError("Please select an address type.");
        return false;
    } 
    if (!validAddressTypes.includes(addressType)) {
        showError("Invalid address type selected.");
        return false;
    }

    // Validation patterns
    const namePattern = /^[A-Za-z\s]+$/;
    const pincodePattern = /^\d{6}$/;
    const phonePattern = /^[6-9]\d{9}$/;
    const specialCharPattern = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/;

    // Text-only fields validation (letters and spaces only)
    const textOnlyFields = ["name", "city", "state"];
    for (const field of textOnlyFields) {
        const input = document.getElementById(field);
        const value = input.value.trim();
        
        if (!value) {
            showError(`Please fill in the ${field} field.`);
            return false;
        }
        if (specialCharPattern.test(value)) {
            showError(`Special characters are not allowed in ${field}.`);
            return false;
        }
        if (!namePattern.test(value)) {
            showError(`${field.charAt(0).toUpperCase() + field.slice(1)} should contain only letters and spaces.`);
            return false;
        }
    }

    // Landmark validation
    const landmark = document.getElementById('landMark').value.trim();
    if (!landmark) {
        showError("Please fill in the landmark field.");
        return false;
    }
    if (specialCharPattern.test(landmark)) {
        showError("Special characters are not allowed in landmark.");
        return false;
    }

    // Pincode validation
    const pincode = document.getElementById('pincode').value.trim();
    if (!pincode) {
        showError("Please enter a pincode.");
        return false;
    }
    if (!pincodePattern.test(pincode)) {
        showError("Pincode must be exactly 6 digits.");
        return false;
    }
    if (/^(\d)\1{5}$/.test(pincode)) {
        showError("Pincode cannot have all digits the same.");
        return false;
    }
    if (pincode.startsWith('00')) {
        showError("Invalid pincode format.");
        return false;
    }

    // Phone numbers validation
    const phone = document.getElementById('phone').value.trim();
    const altPhone = document.getElementById('altPhone').value.trim();

    // Primary phone validation
    if (!phone) {
        showError("Please enter a phone number.");
        return false;
    }
    if (!phonePattern.test(phone)) {
        showError("Phone number must be 10 digits and start with 6-9.");
        return false;
    }
    if (/^(\d)\1{9}$/.test(phone)) {
        showError("Phone number cannot be all same digits.");
        return false;
    }

    // Alternate phone validation
    if (!altPhone) {
        showError("Please enter an alternate phone number.");
        return false;
    }
    if (!phonePattern.test(altPhone)) {
        showError("Alternate phone number must be 10 digits and start with 6-9.");
        return false;
    }
    if (/^(\d)\1{9}$/.test(altPhone)) {
        showError("Alternate phone number cannot be all same digits.");
        return false;
    }

    // Check if phone numbers are different
    if (phone === altPhone) {
        showError("Phone number and alternate phone number must be different.");
        return false;
    }

    return isValid;
}

function showError(message) {
    Swal.fire({
        title: 'Error',
        text: message,
        icon: 'error'
    });
}
</script>

<%- include("../../view/partials/user/footer") %>



