<%-include("../../view/partials/user/header")%>
<style>
    table {
    width: 100%;
    border-collapse: collapse;
}

table th, table td {
    text-align: center; /* Center-align content */
    vertical-align: middle; /* Ensure all content is vertically aligned */
    padding: 10px;
}

table td img {
    display: block;
    margin: 0 auto; /* Center the image horizontally */
    max-width: 50px;
    height: auto;
    border-radius: 5px; /* Optional: Rounded corners */
}

.product-name {
    display: flex;
    align-items: center; /* Align the text vertically with the image */
    gap: 10px; /* Add some space between the image and name */
}

.product-name img {
    width: 50px;
    height: 50px;
    object-fit: cover; /* Ensure the image maintains its aspect ratio */
    border-radius: 5px; /* Optional: Rounded corners */
}

</style>

<div class="container-fluid">
    <% if (locals.message) { %>
        <div class="alert alert-<%= message.type %> alert-dismissible fade show" role="alert">
            <%= message.content %>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    <% } %>
    <div class="row px-xl-5">
        <!-- Products Table -->
        <div class="col-lg-8 table-responsive mb-5">
            <table class="table table-light table-borderless table-hover text-center mb-0">
                <thead class="thead-dark">
                    <tr>
                        <th>Products</th>
                        <th>size</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th>Remove</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (cart && cart.items && cart.items.length > 0) { %>
                        <% cart.items.forEach((item) => { %>
                            <tr>
                                <td>
                                    <!-- Display the first product image or a placeholder if unavailable -->
                                    <% if (item.productId && item.productId.productImage && item.productId.productImage.length > 0) { %>
                                        <img src="/uploads/<%= item.productId.productImage[0] %>" 
                                             style="width: 50px;">
                                    <% } else { %>
                                        <img src="/img/placeholder.jpg" 
                                             alt="Placeholder" 
                                             style="width: 50px;">
                                    <% } %>
                                    <%= item.productId ? item.productId.productName : 'Product Not Found' %> 
                                </td>
                                <td>
                                    <%=item.size%>
                                </td>
                                


                                <td class="align-middle">₹<%= item.price.toFixed(2) %></td>
                                <td class="align-middle">
                                    <form action="/cart/update" method="POST" class="d-inline quantity-form">
                                        <input type="hidden" name="productId" value="<%= item.productId._id %>">
                                        <input type="hidden" name="size" value="<%= item.size %>">

                                         <div class="input-group" style="width: 150px; margin: 0 auto;">
                                            <input type="number" 
                                                   class="form-control form-control-sm quantity-input" 
                                                   name="quantity" 
                                                   value="<%= item.quantity %>" 
                                                   min="1" 
                                                   max="<%= Math.min(maxQuantity, item.productId.sizes.find(s => s.size === item.size)?.quantity || 0) %>"
                                                   data-max="<%= maxQuantity %>"
                                                   data-stock="<%= item.productId.sizes.find(s => s.size === item.size)?.quantity || 0 %>"
                                                   style="width: 70px;">
                                            <div class="input-group-append">
                                                <button type="submit" class="btn btn-sm btn-primary update-btn">Update</button>
                                            </div>
                                        </div>
                                        <small class="text-muted d-block">
                                            Available: <%= item.productId.sizes.find(s => s.size === item.size)?.quantity || 0 %> items
                                        </small>
                                        <div class="invalid-feedback">
                                            Maximum quantity allowed is <%= maxQuantity %>
                                        </div>
                                    </form>
                                </td>
                                <td class="align-middle">₹<%= item.totalPrice.toFixed(2) %></td>
                                <td class="align-middle">
                                    <form action="/cart/remove" method="POST" class="d-inline">
                                        <input type="hidden" name="productId" value="<%= item.productId._id %>">
                                        <input type="hidden" name="size" value="<%= item.size %>"> 
                                        <button type="submit" class="btn btn-sm btn-danger">Remove</button>
                                    </form>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" class="text-center">Your cart is empty</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>

      

        <!-- Cart Summary -->
        
<div class="col-lg-4">
    <!-- <form class="mb-30" action="/cart/apply-coupon" method="POST">
        <div class="input-group">
            <input type="text" class="form-control border-0 p-4" name="couponCode" placeholder="Coupon Code">
            <div class="input-group-append">
                <button class="btn btn-primary" type="submit">Apply Coupon</button>
            </div>
        </div>
    </form> -->
    
    <h5 class="section-title position-relative text-uppercase mb-3">
        <span class="bg-secondary pr-3">Cart Summary</span>
    </h5>
    
    <div class="bg-light p-30 mb-5">
        <div class="border-bottom pb-2">
            <div class="d-flex justify-content-between mb-3">
                <h6>Subtotal</h6>
                <h6>₹<%= totals.subtotal.toFixed(2) %></h6>
            </div>
            <div class="d-flex justify-content-between">
                <h6 class="font-weight-medium">Shipping</h6>
                <h6 class="font-weight-medium">₹<%= totals.shipping.toFixed(2) %></h6>
            </div>
        </div>
        <div class="pt-2">
            <div class="d-flex justify-content-between mt-2">
                <h5>Total</h5>
                <h5>₹<%= totals.total.toFixed(2) %></h5>
            </div>
            <% if (cart && cart.items && cart.items.length > 0) { %>
                <a href="/checkout" class="btn btn-block btn-primary font-weight-bold my-3 py-3">
                    Proceed To Checkout
                </a>
            <% } else { %>
                <button class="btn btn-block btn-secondary font-weight-bold my-3 py-3" disabled>
                    Cart is Empty
                </button>
            <% } %>
        </div>
    </div>
</div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- <script>
    document.addEventListener('DOMContentLoaded', function() {
        const addToCartForm = document.getElementById('addToCartForm');
        const sizeInputs = document.querySelectorAll('input[name="size"]');
        const addToCartButton = document.querySelector('.add-to-cart-btn');
        const quantityInputs = document.querySelectorAll('.quantity-input');
    



        
    quantityInputs.forEach(input => {
        const maxQuantity = parseInt(input.dataset.max);
        const availableStock = parseInt(input.dataset.stock);
        const form = input.closest('form');
        const updateBtn = form.querySelector('.update-btn');
        
        input.addEventListener('input', function() {
            const value = parseInt(this.value);
            const effectiveMax = Math.min(maxQuantity, availableStock);
            
            if (value > effectiveMax) {
                this.classList.add('is-invalid');
                updateBtn.disabled = true;
                
                if (value > availableStock) {
                    this.parentElement.querySelector('.invalid-feedback').textContent = 
                        `Only ${availableStock} items available in stock`;
                } else {
                    this.parentElement.querySelector('.invalid-feedback').textContent = 
                        `Maximum quantity allowed is ${maxQuantity}`;
                }
                this.parentElement.querySelector('.invalid-feedback').style.display = 'block';
            } else {
                this.classList.remove('is-invalid');
                updateBtn.disabled = false;
                this.parentElement.querySelector('.invalid-feedback').style.display = 'none';
            }
        });
        
        // Prevent form submission if quantity is invalid
        form.addEventListener('submit', function(e) {
            const quantityInput = this.querySelector('.quantity-input');
            const value = parseInt(quantityInput.value);
            const availableStock = parseInt(quantityInput.dataset.stock);
            const effectiveMax = Math.min(maxQuantity, availableStock);
            
            if (value > effectiveMax) {
                e.preventDefault();
                if (value > availableStock) {
                    alert(`Only ${availableStock} items available in stock`);
                } else {
                    alert(`Maximum quantity allowed is ${maxQuantity}`);
                }
            }
        });
    });

    // Auto-hide alerts after 5 seconds
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(alert => {
        setTimeout(() => {
            alert.classList.remove('show');
            setTimeout(() => alert.remove(), 150);
        }, 5000);
    });


        
        // Enable/disable add to cart button based on size selection
        sizeInputs.forEach(input => {
            input.addEventListener('change', function() {
                const selectedQuantity = parseInt(this.dataset.quantity);
                addToCartButton.disabled = selectedQuantity === 0;
                
                if (selectedQuantity === 0) {
                    addToCartButton.textContent = 'Out of Stock';
                } else {
                    addToCartButton.textContent = 'Add to Cart';
                }
            });
        });
    
        // Handle form submission
        addToCartForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const selectedSize = document.querySelector('input[name="size"]:checked');
            if (!selectedSize) {
                alert('Please select a size');
                return;
            }
    
            const formData = new FormData(this);
            formData.append('size', selectedSize.value);
    
            // Submit the form with the selected size
            fetch('/add-to-cart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productId: formData.get('productId'),
                    quantity: formData.get('quantity'),
                    size: formData.get('size')
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    window.location.href = '/cart';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to add item to cart');
            });
        });
    });
    </script> -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
    const quantityInputs = document.querySelectorAll('.quantity-input');
    
    quantityInputs.forEach(input => {
        const maxQuantity = parseInt(input.dataset.max);
        const availableStock = parseInt(input.dataset.stock);
        const form = input.closest('form');
        const updateBtn = form.querySelector('.update-btn');
        
        input.addEventListener('input', function() {
            const value = parseInt(this.value);
            const effectiveMax = Math.min(maxQuantity, availableStock);
            
            if (value > effectiveMax) {
                this.classList.add('is-invalid');
                updateBtn.disabled = true;
                
                // SweetAlert implementation for max quantity reached
                if (value > availableStock) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Stock Limit Reached',
                        text: `Only ${availableStock} items available in stock for this size.`,
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#3085d6'
                    });
                    // Reset value to maximum available
                    this.value = availableStock;
                } else {
                    Swal.fire({
                        icon: 'info',
                        title: 'Quantity Limit',
                        text: `Maximum quantity allowed is ${maxQuantity} per item.`,
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#3085d6'
                    });
                    // Reset value to maximum allowed
                    this.value = maxQuantity;
                }
                
                // After showing alert, update the input to valid state
                this.classList.remove('is-invalid');
                updateBtn.disabled = false;
            }
        });
        
        // Prevent form submission if quantity is invalid
        form.addEventListener('submit', function(e) {
            const quantityInput = this.querySelector('.quantity-input');
            const value = parseInt(quantityInput.value);
            const availableStock = parseInt(quantityInput.dataset.stock);
            const effectiveMax = Math.min(maxQuantity, availableStock);
            
            if (value > effectiveMax) {
                e.preventDefault();
                
                if (value > availableStock) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Stock Limit Reached',
                        text: `Only ${availableStock} items available in stock for this size.`,
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#3085d6'
                    });
                    quantityInput.value = availableStock;
                } else {
                    Swal.fire({
                        icon: 'info',
                        title: 'Quantity Limit',
                        text: `Maximum quantity allowed is ${maxQuantity} per item.`,
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#3085d6'
                    });
                    quantityInput.value = maxQuantity;
                }
            }
        });
    });

    // Use SweetAlert for general notifications
    const showNotification = function(message, type = 'success') {
        const config = {
            title: type === 'success' ? 'Success!' : 'Attention',
            text: message,
            icon: type,
            confirmButtonText: 'OK',
            confirmButtonColor: type === 'success' ? '#28a745' : '#dc3545'
        };
        Swal.fire(config);
    };

    // Replace existing alerts with SweetAlert
    if (document.querySelector('.alert')) {
        const alertElement = document.querySelector('.alert');
        const type = alertElement.classList.contains('alert-success') ? 'success' : 
                     alertElement.classList.contains('alert-warning') ? 'warning' : 
                     alertElement.classList.contains('alert-danger') ? 'error' : 'info';
        
        showNotification(alertElement.textContent.trim(), type);
        alertElement.remove();
    }

    // Also handle the "Add to Cart" functionality to use SweetAlert
    const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
    addToCartButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            if (button.textContent === 'Out of Stock') {
                e.preventDefault();
                Swal.fire({
                    icon: 'error',
                    title: 'Out of Stock',
                    text: 'This item is currently unavailable',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
            }
        });
    });
});

</script>

    <%-include("../../view/partials/user/footer")%>
