<%- include("../../view/partials/admin/header") %>
<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" rel="stylesheet">
</head>

<style>
/* Main Container Styles */
.content-main {
    background-color: #f8f9fa;
    padding: 2rem;
    min-height: 100vh;
}

/* Card Styles */
.product-card {
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
}

.card-header {
    border-bottom: 1px solid #e0e0e0;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
}

/* Form Layout */
.form-grid {
    display: grid;
    gap: 1.5rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-row {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
    margin-bottom: 1.5rem;
}

@media (max-width: 768px) {
    .form-row {
        grid-template-columns: 1fr;
    }
}

/* Input Styles */
.form-label {
    display: block;
    font-weight: 500;
    color: #333;
    margin-bottom: 0.5rem;
    font-size: 0.95rem;
}

.form-control {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 0.95rem;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    border-color: #000;
    outline: none;
}

textarea.form-control {
    min-height: 120px;
    resize: vertical;
}

/* Select Styles */
.form-select {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    background-color: white;
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='%23333' viewBox='0 0 16 16'%3E%3Cpath d='M8 12L2 6h12z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    padding-right: 2.5rem;
}

/* Image Upload Section */
.image-upload-section {
    border: 2px dashed #e0e0e0;
    padding: 1.5rem;
    border-radius: 8px;
    margin-top: 1.5rem;
}

.image-preview-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
}

/* Button Styles */
.btn {
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-primary {
    background-color: #000;
    color: white;
    border: none;
}

.btn-primary:hover {
    background-color: #333;
}

/* Error Messages */
.error-message {
    color: #dc2626;
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

/* Title Styles */
.content-title {
    font-size: 1.75rem;
    font-weight: 600;
    color: #000;
    margin-bottom: 2rem;
}
</style>

<section class="content-main">
    <div class="product-card">
        <div class="card-header">
            <h2 class="content-title">Add New Product</h2>
        </div>
        
        <form method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
            <div class="form-grid">
                <!-- Product Name -->
                <div class="form-group">
                    <label class="form-label">Product Name</label>
                    <input type="text" placeholder="Enter product name" name="productName" class="form-control" required>
                    <div id="productName-error" class="error-message"></div>
                </div>

                <!-- Description -->
                <div class="form-group">
                    <label class="form-label">Full Description</label>
                    <textarea placeholder="Enter product description" name="description" class="form-control" rows="4" required></textarea>
                    <div id="description-error" class="error-message"></div>
                </div>

                <!-- Brand -->
                <div class="form-group">
                    <label class="form-label">Brand</label>
                    <select class="form-select" name="brand" required>
                        <option value="">Select Brand</option>
                        <% brands.forEach(brand => { %>
                            <% if (!brand.isBlocked) { %>
                                <option value="<%= brand._id %>"><%= brand.brandName %></option>
                            <% } %>
                        <% }); %>
                    </select>
                    <div id="brand-error" class="error-message"></div>
                </div>

                <!-- Price and Quantity Row -->
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Regular Price</label>
                        <input placeholder="₹" name="regularPrice" type="number" class="form-control" required>
                        <div id="regularPrice-error" class="error-message"></div>
                    </div>

                    <!-- <div class="form-group">
                        <label class="form-label">Sale Price</label>
                        <input placeholder="₹" name="salePrice" type="number" class="form-control">
                        <div id="salePrice-error" class="error-message"></div>
                    </div> -->

                    <div class="form-group">
                        <label class="form-label">Quantity</label>
                        <input name="quantity" type="number" class="form-control" required>
                        <div id="quantity-error" class="error-message"></div>
                    </div>
                </div>

                <!-- Category -->
                <div class="form-group">
                    <label class="form-label">Category</label>
                    <select class="form-select" name="category" id="categorySelect" required onchange="updateSizes()">
                        <% cat.forEach(c => { %>
                            <option value="<%= c.name %>" data-type="<%= c.type %>"><%= c.name %></option>
                        <% }); %>
                    </select>
                    <div id="category-error" class="error-message"></div>
                </div>

                <!-- Sizes and Quantities -->
                <div class="form-group">
                    <label class="form-label">Sizes and Quantities</label>
                    <div id="sizesContainer" class="sizes-grid">
                        <!-- Dynamic size inputs will be added here -->
                    </div>
                    <div id="size-error" class="error-message"></div>
                </div>

                <!-- Image Upload -->
                <div class="image-upload-section">
                    <label class="form-label">Product Images</label>
                    <input class="form-control" type="file" name="images" id="imageInput" accept="image/*" onchange="handleImageSelect(event)">
                    <div id="images-preview-section" class="image-preview-grid"></div>
                    <div id="images-error" class="error-message"></div>
                    <button type="button" class="btn btn-primary mt-3" onclick="addMoreImages()">Add More Images</button>
                </div>

                <!-- Submit Button -->
                <div class="form-group">
                    <button class="btn btn-primary" type="submit">Publish Product</button>
                </div>
            </div>
        </form>
    </div>
</section>


<script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>


<script>



const croppies = {};
let currentImageCount = 0;
const MAX_IMAGES = 4; // Maximum number of images allowed

function handleImageSelect(event) {
    const file = event.target.files[0];
    if (file) {
        if (currentImageCount >= MAX_IMAGES) {
            alert(`Maximum ${MAX_IMAGES} images allowed`);
            return;
        }
        
        currentImageCount++;
        const index = currentImageCount;
        
        // Create container for new image
        const imageContainer = createImageContainer(index);
        document.getElementById('images-preview-section').appendChild(imageContainer);
        
        // Process the image
        const reader = new FileReader();
        reader.onload = function(e) {
            viewImage(e, index);
        };
        reader.readAsDataURL(file);
        
        // Reset file input for next selection
        event.target.value = '';
    }
}

function createImageContainer(index) {
    const container = document.createElement('div');
    container.className = 'mb-4';
    container.id = `image-section-${index}`;
    
    container.innerHTML = `
        <div id="crop-container${index}" class="crop-container" style="display: none;">
            <div id="croppie${index}" class="croppie-wrapper"></div>
            <button type="button" class="btn btn-sm btn-primary mt-3" onclick="saveImage('${index}')">Save</button>
        </div>
        <div id="image-preview${index}"></div>
    `;
    
    return container;
}

function viewImage(event, index) {
    const imageData = event.target.result;
    const cropContainer = document.getElementById(`crop-container${index}`);
    const croppieElement = document.getElementById(`croppie${index}`);

    // Destroy existing Croppie instance if it exists
    if (croppies[index]) {
        croppies[index].destroy();
    }

    cropContainer.style.display = 'block';

    croppies[index] = new Croppie(croppieElement, {
        viewport: { width: 150, height: 150, type: 'square' },
        boundary: { width: 250, height: 250 },
        showZoomer: true,
        enableOrientation: true,
    });

    // Load image into Croppie instance
    croppies[index].bind({
        url: imageData,
    });
}

function saveImage(index) {
    if (croppies[index]) {
        croppies[index]
            .result({
                type: 'base64',
                format: 'png',
            })
            .then((base64) => {
                const timestamp = Date.now();
                const renamedFile = `cropped-img-${timestamp}-${index}.png`;

                // Create or update hidden input
                const hiddenInputId = `croppedImage${index}`;
                let hiddenInput = document.getElementById(hiddenInputId);

                if (!hiddenInput) {
                    hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'croppedImages';
                    hiddenInput.id = hiddenInputId;
                    document.querySelector('form').appendChild(hiddenInput);
                }

                hiddenInput.value = base64;

                // Update preview
                const previewContainer = document.getElementById(`image-preview${index}`);
                previewContainer.innerHTML = '';
                
                const previewWrapper = document.createElement('div');
                previewWrapper.className = 'd-flex align-items-center gap-2 mt-3';
                
                const img = document.createElement('img');
                img.src = base64;
                img.alt = renamedFile;
                img.style.width = '100px';
                img.style.height = '100px';
                img.style.objectFit = 'cover';
                
                const deleteBtn = document.createElement('button');
                deleteBtn.type = 'button';
                deleteBtn.className = 'btn btn-sm btn-danger';
                deleteBtn.innerHTML = '×';
                deleteBtn.onclick = () => deleteImage(index);
                
                previewWrapper.appendChild(img);
                previewWrapper.appendChild(deleteBtn);
                previewContainer.appendChild(previewWrapper);

                // Hide crop container
                document.getElementById(`crop-container${index}`).style.display = 'none';
                croppies[index].destroy();
                croppies[index] = null;
            });
    }
}

function deleteImage(index) {
    const section = document.getElementById(`image-section-${index}`);
    if (section) {
        section.remove();
    }
    
    // Remove hidden input
    const hiddenInput = document.getElementById(`croppedImage${index}`);
    if (hiddenInput) {
        hiddenInput.remove();
    }
    
    // Cleanup croppie if exists
    if (croppies[index]) {
        croppies[index].destroy();
        croppies[index] = null;
    }
    
    currentImageCount--;
}

function addMoreImages() {
    if (currentImageCount >= MAX_IMAGES) {
        alert(`Maximum ${MAX_IMAGES} images allowed`);
        return;
    }
    document.getElementById('imageInput').click();
}



    

    function updateSizes() {
    const categorySelect = document.getElementById('categorySelect');
    const selectedOption = categorySelect.options[categorySelect.selectedIndex];
    const categoryType = selectedOption.getAttribute('data-type');
    const sizesContainer = document.getElementById('sizesContainer');
    sizesContainer.innerHTML = '';

    let sizes = [];
    if (categoryType === 'Clothing') {
        sizes = ['S', 'M', 'L', 'XL', 'XXL'];
    } else if (categoryType === 'Footwear') {
        sizes = ['5', '6', '7', '8', '9', '10'];
    }

    // Create a hidden input for sizes array if it doesn't exist
    let sizesArrayInput = document.getElementById('sizesArrayInput');
    if (!sizesArrayInput) {
        sizesArrayInput = document.createElement('input');
        sizesArrayInput.type = 'hidden';
        sizesArrayInput.id = 'sizesArrayInput';
        sizesArrayInput.name = 'sizes';
        document.querySelector('form').appendChild(sizesArrayInput);
    }

    sizes.forEach(size => {
        const sizeDiv = document.createElement('div');
        sizeDiv.className = 'row mb-2';
        sizeDiv.innerHTML = `
            <div class="col-md-2">
                <label class="form-label">Size ${size}</label>
            </div>
            <div class="col-md-4">
                <input type="number" 
                       class="form-control border size-quantity" 
                       data-size="${size}"
                       placeholder="Quantity for size ${size}" 
                       min="0" 
                       value="0"
                       onchange="updateSizesArray()">
            </div>
        `;
        sizesContainer.appendChild(sizeDiv);
    });

    // Initialize sizes array
    updateSizesArray();
}

function updateSizesArray() {
    const sizeInputs = document.querySelectorAll('.size-quantity');
    const sizesArray = [];

    sizeInputs.forEach(input => {
        const quantity = parseInt(input.value) || 0;
        const size = input.getAttribute('data-size');
        
        if (quantity > 0) {
            sizesArray.push({
                size: size,
                quantity: quantity
            });
        }
    });

    // Update hidden input value
    const sizesArrayInput = document.getElementById('sizesArrayInput');
    sizesArrayInput.value = JSON.stringify(sizesArray);
}



function validateForm() {
    clearErrorMessages();
    let isValid = true;

    // Get form elements
    const name = document.getElementsByName('productName')[0]?.value || '';
    // const description = document.getElementsByName('description')[0]?.value || '';
    const descriptionElement = document.querySelector('textarea[name="description"]');
    const description = descriptionElement ? descriptionElement.value : '';
    const brand = document.getElementsByName('brand')[0]?.value || '';
    const price = document.getElementsByName('regularPrice')[0]?.value || '';
    const saleprice = document.getElementsByName('salePrice')[0]?.value || '';
    const color = document.getElementsByName('color')[0]?.value || '';
    const category = document.getElementsByName('category')[0]?.value || '';
    // const images = document.getElementById('input1');
    const status = document.getElementsByName('status')[0]?.value;

    // const previewSection = document.getElementById('images-preview-section');
    // const imageContainers = previewSection.getElementsByClassName('image-container') || [];
    const croppedImageInputs = document.querySelectorAll('input[name="croppedImages"]');
    const getActualLength = (str) => str.replace(/\s/g, '').length;

    // Validate product name
    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s-]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name can only contain letters, numbers, spaces and hyphens.');
        isValid = false;
    }else if (getActualLength(name) < 3) {  // Minimum 3 actual characters for product name
        displayErrorMessage('productName-error', 'Product name must contain at least 3 letters/numbers (spaces not counted).');
        isValid = false;
    }

    // Validate description
    if (!description || description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    } else if (getActualLength(description) < 10) {  // Check actual characters excluding whitespace
        displayErrorMessage('description-error', 'Description must contain at least 10 letters (spaces not counted).');
        isValid = false;
    }

    // Validate brand
    if (brand.trim() === "") {
        displayErrorMessage('brand-error', 'Please enter a brand name.');
        isValid = false;
    }

    // Validate regular price
    if (!price || !/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid positive price.');
        isValid = false;
    }

    // Validate sale price
    // if (saleprice !== '') {  // Only validate if sale price is provided
    //     if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) <= 0) {
    //         displayErrorMessage('salePrice-error', 'Please enter a valid positive price.');
    //         isValid = false;
    //     } else if (parseFloat(saleprice) >= parseFloat(price)) {
    //         displayErrorMessage('salePrice-error', 'Sale price must be less than regular price.');
    //         isValid = false;
    //     }
    // }


    // Validate category
    if (!category || category.trim() === "") {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    // Validate status
    if (status !== undefined) {
        const validStatuses = ['inStock', 'outOfStock', 'Discontinued', 'Available'];
        if (status.trim() === "") {
            displayErrorMessage('status-error', 'Please select a status.');
            isValid = false;
        } else if (!validStatuses.includes(status)) {
            displayErrorMessage('status-error', 'Invalid status value selected.');
            isValid = false;
        }
    }

    // Validate images
    // if (images.files.length === 0) {
    //     displayErrorMessage("images-error", 'Please select an image.');
    //     isValid = false;
    // }

    if (croppedImageInputs.length === 0) {
        displayErrorMessage('images-error', 'Please select images for the product.');
        isValid = false;
    } else if (croppedImageInputs.length < 2) {
        displayErrorMessage('images-error', 'Please select at least 2 images for the product.');
        isValid = false;
    }
    // Validate sizes
    const sizeInputs = document.querySelectorAll('.size-quantity');
    let totalQuantity = 0;

    sizeInputs.forEach(input => {
        const quantity = parseInt(input.value) || 0;
        if (quantity < 0) {
            displayErrorMessage('size-error', 'Quantities cannot be negative.');
            isValid = false;
        }
        totalQuantity += quantity;
    });

    if (totalQuantity === 0) {
        displayErrorMessage('size-error', 'At least one size must have a quantity greater than 0.');
        isValid = false;
    }

    // Update sizes array before submission if form is valid
    if (isValid) {
        updateSizesArray();
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;  // Using textContent for better security
        errorElement.style.display = "block";
    } else {
        console.error(`Error element with id '${elementId}' not found`);
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.textContent = '';  // Using textContent for better security
        element.style.display = 'none';
    });
}







</script>

<%- include("../../view/partials/admin/footer") %>