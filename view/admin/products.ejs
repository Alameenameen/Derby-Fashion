<%- include("../../view/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
  --primary-black: #1a1a1a;
  --secondary-black: #333333;
  --light-gray: #f5f5f5;
  --border-gray: #e0e0e0;
  --accent-blue: #4a90e2;
  --accent-red: #e74c3c;
  --accent-green: #2ecc71;
  --text-dark: #2d3436;
}

/* Header Styles */
.content-header {
  padding: 2rem 0;
  border-bottom: 1px solid var(--border-gray);
}

.content-title {
  font-size: 2rem;
  color: var(--primary-black);
  font-weight: 600;
  margin: 0;
}

/* Search Bar Styles */
.card-header {
  padding: 1.5rem 0;
  margin-bottom: 2rem;
}
/* Search Bar Styles */
.input-group {
    display: flex;
    align-items: center;
    background: white;
    border: 2px solid var(--primary-black);
    border-radius: 50px;
    padding: 0.3rem;
    width: 500px;
    margin-left: 230px;
}

.input-group input {
    flex: 1;
    border: none;
    padding: 0.8rem 1.5rem;
    outline: none;
    background: transparent;
    border-radius: 50px;
}

.input-group button {
    background: var(--primary-black);
    color: white;
    border: none;
    padding: 0.8rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-right: 0.2rem;
}

.input-group button:hover {
    background: var(--secondary-black);
    transform: translateY(-1px);
}

/* Responsive adjustment for search */
@media (max-width: 768px) {
    .input-group {
        width: 100%;
        margin-left: 0;
    }
    
    .input-group input,
    .input-group button {
        padding: 0.6rem 1rem;
    }
}

/* Table Styles */
.table {
  width: 100%;
  background: white;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  margin-top: 2rem;
}

.table thead {
  background: var(--primary-black);
  color: white;
}

.table th {
  padding: 1.2rem 1rem;
  font-weight: 500;
  text-transform: uppercase;
  font-size: 0.9rem;
  letter-spacing: 0.5px;
}

.table td {
  padding: 1rem;
  vertical-align: middle;
  border-bottom: 1px solid var(--border-gray);
}

.table tbody tr:hover {
  background: var(--light-gray);
}

/* Button Styles */
.btn {
  padding: 0.6rem 1.2rem;
  border-radius: 5px;
  border: none;
  font-weight: 500;
  transition: all 0.3s ease;
  text-decoration: none;
  margin: 0.2rem;
}

.btn-info {
  background: var(--accent-blue);
  color: white;
  min-width: 100px;
}

.btn-block {
  background: var(--accent-red);
  color: white;
}

.btn-unblock {
  background: var(--accent-green);
  color: white;
}

.btn:hover {
  transform: translateY(-1px);
  opacity: 0.9;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.btn a {
  color: white;
  text-decoration: none;
  display: block;
  width: 100%;
  height: 100%;
}

/* Size List Styles */
.list-unstyled {
  margin: 0;
  padding: 0;
  list-style: none;
}

.list-unstyled li {
  font-size: 0.9rem;
  margin-bottom: 0.3rem;
}

/* Pagination Styles */
.pagination {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 2rem;
  padding: 1rem 0;
}

.page-item {
  list-style: none;
}

.page-link {
  padding: 0.5rem 1rem;
  border: 1px solid var(--border-gray);
  border-radius: 5px;
  color: var(--primary-black);
  text-decoration: none;
  transition: all 0.3s ease;
}

.page-item.active .page-link {
  background: var(--primary-black);
  color: white;
  border-color: var(--primary-black);
}

.page-link:hover {
  background: var(--light-gray);
}

/* Action Buttons Container */
.action-btns {
  white-space: nowrap;
}

/* Responsive Styles */
@media (max-width: 768px) {
  .input-group {
    width: 100%;
    margin: 0;
  }
  
  .table {
    display: block;
    overflow-x: auto;
    white-space: nowrap;
  }
  
  .btn {
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
  }
  
  .content-title {
    font-size: 1.5rem;
  }
}
    </style>
</head>
<div class="content-header">
    <div>
        <h2 class="content-title card-title">Products</h2>
    </div>
</div>
<header class="card-header text-center mb-20">
    <form action="" method="get" class="d-inline">
        <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin-left: 230px;">
            <input type="text" class="form-control border-0 rounded-pill" placeholder="Search products or brands" name="search" value="<%= searchQuery %>">
            <button class="btn  border-0" type="submit">Search</button>
        </div>
    </form>
</header>
<div class="right mt-5">
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col"><b>No</b></th>
                <th scope="col"><b>Product name</b></th>
                <th scope="col"><b>Brand</b></th>
                <th scope="col"><b>Category</b></th>
                <th scope="col"><b>Regular Price</b></th>
                <th scope="col"><b>Sale Price</b></th>
                <!-- <th scope="col"><b>Offer Price</b></th> -->
                <!-- <th scope="col"><b>Offer</b></th> -->
                <th scope="col"><b>Total Qty</b></th>
                <th scope="col"><b>Sizes & Qty</b></th>
                <th scope="col"><b>Offer</b></th>
                <th scope="col"><b>Action</b></th>
                <th scope="col"><b>Edit</b></th>
            </tr>
        </thead>
        <tbody>
            <% for (let i = data.length - 1; i >= 0; i--) { %>
                <tr>
                    <td><%= data.length - i %></td>
                    <td><%= data[i].productName %></td>
                    <td><%= data[i].brand ? data[i].brand.brandName : "N/A" %></td>
                    <td><%= data[i].category ? data[i].category.name : "N/A" %></td>
                    <td><%= data[i].regularPrice %></td>
                    <td><%= data[i].salePrice %></td>
                    <td><%= data[i].quantity %></td>
                    <td>
                        <% if (data[i].sizes && data[i].sizes.length > 0) { %>
                            <ul class="list-unstyled">
                                <% data[i].sizes.forEach(sizeObj => { %>
                                    <li><b>Size:</b> <%= sizeObj.size %>, <b>Qty:</b> <%= sizeObj.quantity %></li>
                                <% }); %>
                            </ul>
                        <% } else { %>
                            <span>N/A</span>
                        <% } %>
                    </td>
                    <td>
                      <% if (!data[i].offer || !data[i].offer.isActive) { %>
                        <button class="btn btn-info" onclick="openAddOfferModal('<%= data[i]._id %>')" style="width: 100px;">
                          Add Offer
                        </button>
                      <% } else { %>
                        <button class="btn btn-info" onclick="openEditOfferModal('<%= data[i]._id %>')" style="width: 100px;">
                          Edit Offer
                        </button>
                        <button class="btn btn-danger" onclick="removeOffer('<%= data[i]._id %>')" style="width: 100px;">
                          Remove Offer
                        </button>
                      <% } %>
                    </td>
                    
                    <td class="action-btns">
                        <% if (data[i].isBlocked === false) { %>
                        <button class="btn btn-block">
                            <a href="/admin/blockProduct?id=<%= data[i]._id %>">Block</a>
                        </button>
                        <% } else { %>
                        <button class="btn btn-unblock">
                            <a href="/admin/unblockProduct?id=<%= data[i]._id %>">Unblock</a>
                        </button>
                        <% } %>
                    </td>
                    <td>
                        <button class="btn btn-info" style="width: 80px;">
                            <a href="/admin/editProduct?id=<%= data[i]._id %>" class="text-white" style="text-decoration: none;">Edit</a>
                        </button>
                    </td>
                </tr>
            <% } %>
        </tbody>
        

    </table>
</div>
</div>
</div>

<div class="container mt-3">
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <% for (let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                <a class="page-link" href="?page=<%= i %>"><%= i %></a>
            </li>
            <% } %>
        </ul>
    </nav>
</div>

<!-- //add offer modal -->

<!--  Add Offer Modal -->
<div class="modal fade" id="addOfferModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title">Add Offer</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <form id="addOfferForm">
                  <input type="hidden" id="addOfferProductId" name="productId">
                  <div class="mb-3">
                      <label for="percentage" class="form-label">Discount Percentage</label>
                      <input type="number" class="form-control" id="percentage" name="percentage">
                  </div>
                  <div class="mb-3">
                      <label for="startDate" class="form-label">Start Date</label>
                      <input type="date" class="form-control" id="startDate" name="startDate" required>
                  </div>
                  <div class="mb-3">
                      <label for="endDate" class="form-label">End Date</label>
                      <input type="date" class="form-control" id="endDate" name="endDate" required>
                  </div>
                  <button type="submit" class="btn btn-primary">Add Offer</button>
              </form>
          </div>
      </div>
  </div>
</div>

<!-- Edit Offer Modal -->
<div class="modal fade" id="editOfferModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title">Edit Offer</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <form id="editOfferForm">
                  <input type="hidden" id="editOfferProductId" name="productId">
                  <div class="mb-3">
                      <label for="editPercentage" class="form-label">Discount Percentage</label>
                      <input type="number" class="form-control" id="editPercentage" name="percentage" >
                  </div>
                  <div class="mb-3">
                      <label for="editStartDate" class="form-label">Start Date</label>
                      <input type="date" class="form-control" id="editStartDate" name="startDate" required>
                  </div>
                  <div class="mb-3">
                      <label for="editEndDate" class="form-label">End Date</label>
                      <input type="date" class="form-control" id="editEndDate" name="endDate" required>
                  </div>
                  <button type="submit" class="btn btn-primary">Update Offer</button>
              </form>
          </div>
      </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>
  function openAddOfferModal(productId) {
      document.getElementById('addOfferProductId').value = productId;
      new bootstrap.Modal(document.getElementById('addOfferModal')).show();
  }

  function openEditOfferModal(productId) {
      document.getElementById('editOfferProductId').value = productId;
      
      fetch(`/admin/getOffer/${productId}`)
          .then(response => response.json())
          .then(data => {
              document.getElementById('editPercentage').value = data.percentage;
              document.getElementById('editStartDate').value = new Date(data.startDate).toISOString().split('T')[0];
              document.getElementById('editEndDate').value = new Date(data.endDate).toISOString().split('T')[0];
              new bootstrap.Modal(document.getElementById('editOfferModal')).show();
          })
          .catch(error => {
              console.error('Error:', error);
              Swal.fire('Error', 'Failed to fetch offer details', 'error');
          });
  }

  function removeOffer(productId) {
      Swal.fire({
          title: 'Are you sure?',
          text: "This will remove the offer from this product",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, remove it!'
      }).then((result) => {
          if (result.isConfirmed) {
              fetch('/admin/removeOffer', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({ productId })
              })
              .then(response => response.json())
              .then(data => {
                  if (data.message) {
                      Swal.fire(
                          'Deleted!',
                          data.message,
                          'success'
                      ).then(() => {
                          location.reload();
                      });
                  } else {
                      Swal.fire('Error', data.error || 'Something went wrong', 'error');
                  }
              })
              .catch(error => {
                  console.error('Error:', error);
                  Swal.fire('Error', 'Failed to remove offer', 'error');
              });
          }
      });
  }

  // Add Offer Form Submission
      // Custom validation function for both forms
function validateOfferForm(form) {
    const percentage = form.querySelector('input[name="percentage"]');
    const startDate = form.querySelector('input[name="startDate"]');
    const endDate = form.querySelector('input[name="endDate"]');
    let isValid = true;

    // Clear previous error messages
    form.querySelectorAll('.error-message').forEach(el => el.remove());

    // Validate percentage
    const percentageValue = parseInt(percentage.value);
    if (isNaN(percentageValue) || percentageValue < 1 || percentageValue >= 100) {
        showError(percentage, 'Percentage must be between 1 and 100');
        isValid = false;
    }

    // Get dates
    const startDateValue = new Date(startDate.value);
    const endDateValue = new Date(endDate.value);
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // Validate start date
    if (startDateValue < today) {
        showError(startDate, 'Start date cannot be in the past');
        isValid = false;
    }

    // Validate end date
    if (endDateValue <= startDateValue) {
        showError(endDate, 'End date must be after start date');
        isValid = false;
    }

    return isValid;
}

// Helper function to show error messages
function showError(element, message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message text-danger mt-1';
    errorDiv.textContent = message;
    element.parentNode.appendChild(errorDiv);
}

// Add validation styles
const styleSheet = document.createElement('style');
styleSheet.textContent = `
    .error-message {
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
    input.is-invalid {
        border-color: #dc3545;
    }
`;
document.head.appendChild(styleSheet);

// Add Offer Form Submission with validation
document.getElementById('addOfferForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    if (!validateOfferForm(this)) {
        return;
    }
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData);
    
    fetch('/admin/addOffer', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            Swal.fire('Success', data.message, 'success').then(() => {
                location.reload();
            });
        } else {
            Swal.fire('Error', data.error, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'Failed to add offer', 'error');
    });
});

// Edit Offer Form Submission with validation
document.getElementById('editOfferForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    if (!validateOfferForm(this)) {
        return;
    }
    
    const formData = new FormData(this);
    const data = Object.fromEntries(formData);
    
    fetch('/admin/editOffer', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            Swal.fire('Success', data.message, 'success').then(() => {
                location.reload();
            });
        } else {
            Swal.fire('Error', data.error, 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'Failed to update offer', 'error');
    });
});

// Add real-time validation for percentage inputs
function setupPercentageValidation(inputId) {
    const input = document.getElementById(inputId);
    input.addEventListener('input', function() {
        const value = parseInt(this.value);
        if (isNaN(value) || value < 1 || value >= 100) {
            this.classList.add('is-invalid');
        } else {
            this.classList.remove('is-invalid');
        }
    });
}

// Setup validation for both forms
setupPercentageValidation('percentage');
setupPercentageValidation('editPercentage');
</script>

<%- include("../../view/partials/admin/footer") %>
